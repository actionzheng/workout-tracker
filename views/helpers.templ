package appviews

import (
	"context"
	"github.com/jovandeginste/workout-tracker/pkg/database"
	"github.com/jovandeginste/workout-tracker/pkg/templatehelpers"
	appversion "github.com/jovandeginste/workout-tracker/pkg/version"
	"github.com/labstack/echo/v4"
	"github.com/vorlif/spreak"
	"github.com/vorlif/spreak/humanize"
	lng "golang.org/x/text/language"
	"time"
)

const timeFormat = "2006-01-02 15:04"

func language(ctx context.Context) string {
	return translator(ctx).Language().String()
}

func supportedLanguages(ctx context.Context) []lng.Tag {
	return genericTranslator(ctx).SupportedLanguages()
}
func ToLanguageInformation(code string) templatehelpers.LanguageInformation {
	return templatehelpers.ToLanguageInformation(code)
}

func i18n(ctx context.Context, msg string, params ...any) string {
	return translator(ctx).Getf(msg, params...)
}

func AppConfig(ctx context.Context) *database.Config {
	if v := ctx.Value("config"); v != nil {
		return v.(*database.Config)
	}

	return nil
}
func version(ctx context.Context) *appversion.Version {
	if v := ctx.Value("version"); v != nil {
		return v.(*appversion.Version)
	}

	return nil
}

func notices(ctx context.Context) []string {
	if e := ctx.Value("notices"); e != nil {
		return e.([]string)
	}

	return nil
}
func errors(ctx context.Context) []string {
	if e := ctx.Value("errors"); e != nil {
		return e.([]string)
	}

	return nil
}
func iconFor(name string) string {
	return string(templatehelpers.IconFor(name))
}

func appEcho(ctx context.Context) *echo.Echo {
	if e := ctx.Value("echo"); e != nil {
		return e.(*echo.Echo)
	}

	return nil
}

func translator(ctx context.Context) *spreak.Localizer {
	if t := ctx.Value("translator"); t != nil {
		return t.(*spreak.Localizer)
	}

	return nil
}
func genericTranslator(ctx context.Context) *spreak.Bundle {
	if t := ctx.Value("generic_translator"); t != nil {
		return t.(*spreak.Bundle)
	}

	return nil
}
func humanizer(ctx context.Context) *humanize.Humanizer {
	if h := ctx.Value("humanizer"); h != nil {
		return h.(*humanize.Humanizer)
	}

	return nil
}

func routeFor(ctx context.Context, name string, params ...any) string {
	e := appEcho(ctx)
	if e == nil {
		return "/invalid/route/#" + name
	}

	if rev := e.Reverse(name, params...); rev != "" {
		return rev
	}

	return "/invalid/route/#" + name
}

func CurrentUser(ctx context.Context) *database.User {
	if dbUser := ctx.Value("user_info"); dbUser != nil {
		return dbUser.(*database.User)
	}

	return database.AnonymousUser()
}

templ RouteFor(name string, params ...any) {
	@templ.Raw(routeFor(ctx, name, params))
}

func UserPreferredUnits(ctx context.Context) *database.UserPreferredUnits {
	return CurrentUser(ctx).PreferredUnits()
}

func RelativeDate(ctx context.Context, t *time.Time) string {
	return humanizer(ctx).NaturalTime(t)
}

func LocalDate(ctx context.Context, t *time.Time) string {
	return t.In(CurrentUser(ctx).Timezone()).Format(timeFormat)
}
func LocalTime(ctx context.Context, t *time.Time) time.Time {
	return t.In(CurrentUser(ctx).Timezone())
}
func HumanDuration(d time.Duration) string {
	return templatehelpers.HumanDuration(d)
}
func HumanElevation(ctx context.Context, d float64) string {
	return templatehelpers.HumanElevationFor(CurrentUser(ctx).PreferredUnits().Elevation())(d)
}
func HumanDistance(ctx context.Context, d float64) string {
	return templatehelpers.HumanDistanceFor(CurrentUser(ctx).PreferredUnits().Distance())(d)
}
func HumanTempo(ctx context.Context, d float64) string {
	return templatehelpers.HumanTempoFor(CurrentUser(ctx).PreferredUnits().Distance())(d)
}
func HumanSpeed(ctx context.Context, d float64) string {
	return templatehelpers.HumanSpeedFor(CurrentUser(ctx).PreferredUnits().Speed())(d)
}
func HumanCalories(d float64) string {
	return templatehelpers.HumanCaloriesKcal(d)
}

func InTimezone(t *time.Time, tz string) time.Time {
	tzLoc, err := time.LoadLocation(tz)
	if err != nil {
		tzLoc = time.UTC
	}

	return t.In(tzLoc)
}
