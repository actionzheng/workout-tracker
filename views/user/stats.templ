package user

import (
	"fmt"
	"github.com/jovandeginste/workout-tracker/pkg/database"
	"github.com/jovandeginste/workout-tracker/views/helpers"
	"github.com/jovandeginste/workout-tracker/views/partials"
	"time"
)

templ StatsRecordsTotal(user *database.User) {
	{{ totals, _ := user.GetDefaultTotals() }}
	{{ preferredUnits := helpers.CurrentUser(ctx).PreferredUnits() }}
	<div class="md:flex md:flex-wrap">
		@StatisticTile(totals.WorkoutType.String(), helpers.I18n(ctx, totals.WorkoutType.String()), fmt.Sprintf("%d", totals.Workouts), "")
		@StatisticTile("distance", helpers.I18n(ctx, "distance"), helpers.HumanDistance(ctx, totals.Distance), preferredUnits.Distance())
		@StatisticTile("up", helpers.I18n(ctx, "up"), helpers.HumanElevation(ctx, totals.Up), preferredUnits.Elevation())
		@StatisticTile("duration", helpers.I18n(ctx, "duration"), helpers.HumanDuration(totals.Duration), "")
	</div>
}

templ StatisticTile(icon string, name string, value string, unit string) {
	<div class="md:basis-1/2 lg:basis-1/4">
		<div class="inner-form">
			<div class="grid grid-cols-3">
				<div class="text-3xl md:text-5xl text-center">
					@helpers.IconFor(icon)
				</div>
				<div class="col-span-2 grid grid-cols-1">
					<div
						class="text-xl md:text-3xl text-right font-mono md:h-8 overflow-hidden"
					>
						{ value } { unit }
					</div>
					<div class="text-neutral-600 dark:text-neutral-400 text-sm text-right">
						{ name }
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ StatsRecordDurationDate(workout *database.DurationRecord) {
	@StatsRecordDate(workout.ID, &workout.Date)
}

templ StatsRecordDistanceDate(workout *database.Float64Record) {
	@StatsRecordDate(workout.ID, &workout.Date)
}

templ StatsRecordDate(id uint, date *time.Time) {
	<span class="hidden xl:inline">
		<a href={ templ.SafeURL(helpers.RouteFor(ctx, "workout-show", id)) }>
			{ helpers.LocalDate(ctx, date ) }
		</a>
		<span class="hidden 2xl:inline">
			({ helpers.RelativeDate (ctx, date) })
		</span>
	</span>
	<span class="xl:hidden" title={ helpers.LocalDate(ctx, date) }>
		<a href={ templ.SafeURL(helpers.RouteFor(ctx, "workout-show", id)) }>
			{ date.Format("2006-01-02") }
		</a>
	</span>
}

templ StatsRecordsDistance(rec *database.WorkoutRecord) {
	{{ preferredUnits := helpers.CurrentUser(ctx).PreferredUnits() }}
	<h3>
		@helpers.IconFor(rec.WorkoutType.String())
		{ helpers.I18n(ctx, "Records for %s", helpers.I18n(ctx, rec.WorkoutType.String())) }
	</h3>
	<table class="workout-info table-auto">
		<tbody>
			<tr>
				<th>
					<span>
						@helpers.IconFor("speed")
						{ helpers.I18n(ctx, "Average speed") }
					</span>
				</th>
				<td class="font-mono whitespace-nowrap">
					@partials.PreferredSpeedMetric(&rec.WorkoutType, rec.AverageSpeed.Value, preferredUnits)
				</td>
				<td>
					@StatsRecordDistanceDate(&rec.AverageSpeed)
				</td>
			</tr>
			<tr>
				<th>
					<span>
						@helpers.IconFor("speed")
						{ helpers.I18n(ctx, "Average speed (no pause)") }
					</span>
				</th>
				<td class="font-mono whitespace-nowrap">
					@partials.PreferredSpeedMetric(&rec.WorkoutType, rec.AverageSpeedNoPause.Value, preferredUnits)
				</td>
				<td>
					@StatsRecordDistanceDate(&rec.AverageSpeedNoPause)
				</td>
			</tr>
			<tr>
				<th>
					<span>
						@helpers.IconFor("max-speed")
						{ helpers.I18n(ctx, "Max speed") }
					</span>
				</th>
				<td class="font-mono whitespace-nowrap">
					@partials.PreferredSpeedMetric(&rec.WorkoutType, rec.MaxSpeed.Value, preferredUnits)
				</td>
				<td>
					@StatsRecordDistanceDate(&rec.MaxSpeed)
				</td>
			</tr>
			<tr>
				<th>
					<span>
						@helpers.IconFor("distance")
						{ helpers.I18n(ctx, "Total distance") }
					</span>
				</th>
				<td class="font-mono whitespace-nowrap">
					{ helpers.HumanDistance(ctx, rec.Distance.Value) } { preferredUnits.Distance() }
				</td>
				<td>
					@StatsRecordDistanceDate(&rec.Distance)
				</td>
			</tr>
			<tr>
				<th>
					<span>
						@helpers.IconFor("up")
						{ helpers.I18n(ctx, "Total up") }
					</span>
				</th>
				<td class="font-mono whitespace-nowrap">
					{ helpers.HumanElevation(ctx, rec.TotalUp.Value ) } { preferredUnits.Elevation() }
				</td>
				<td>
					@StatsRecordDistanceDate(&rec.TotalUp)
				</td>
			</tr>
			<tr>
				<th>
					<span>
						@helpers.IconFor("duration")
						{ helpers.I18n(ctx, "Total duration") }
					</span>
				</th>
				<td class="font-mono whitespace-nowrap">{ helpers.HumanDuration(rec.Duration.Value) }</td>
				<td>
					@StatsRecordDurationDate(&rec.Duration)
				</td>
			</tr>
		</tbody>
	</table>
}
