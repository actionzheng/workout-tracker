// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package helpers

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"context"
	"github.com/jovandeginste/workout-tracker/pkg/database"
	appversion "github.com/jovandeginste/workout-tracker/pkg/version"
	"github.com/labstack/echo/v4"
	"github.com/vorlif/spreak"
	"github.com/vorlif/spreak/humanize"
)

func contextDummy() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		return templ_7745c5c3_Err
	})
}

func AppConfig(ctx context.Context) *database.Config {
	if v := ctx.Value("config"); v != nil {
		return v.(*database.Config)
	}

	return nil
}

func Version(ctx context.Context) *appversion.Version {
	if v := ctx.Value("version"); v != nil {
		return v.(*appversion.Version)
	}

	return nil
}

func Notices(ctx context.Context) []string {
	e := ctx.Value("notices")
	if e == nil {
		return nil
	}

	switch v := e.(type) {
	case string:
		if len(v) == 0 {
			return nil
		}

		return []string{v}
	case []string:
		return v
	default:
		return nil
	}
}

func Errors(ctx context.Context) []string {
	e := ctx.Value("errors")
	if e == nil {
		return nil
	}

	switch v := e.(type) {
	case string:
		if len(v) == 0 {
			return nil
		}

		return []string{v}
	case []string:
		return v
	default:
		return nil
	}
}

func appEcho(ctx context.Context) *echo.Echo {
	if e := ctx.Value("echo"); e != nil {
		return e.(*echo.Echo)
	}

	return nil
}

func translator(ctx context.Context) *spreak.Localizer {
	return CurrentUser(ctx).GetTranslator()
}

func genericTranslator(ctx context.Context) *spreak.Bundle {
	if t := ctx.Value("generic_translator"); t != nil {
		return t.(*spreak.Bundle)
	}

	return nil
}

func humanizer(ctx context.Context) *humanize.Humanizer {
	return CurrentUser(ctx).GetHumanizer()
}

func CurrentUser(ctx context.Context) *database.User {
	if dbUser := ctx.Value("user_info"); dbUser != nil {
		return dbUser.(*database.User)
	}

	return database.AnonymousUser()
}

var _ = templruntime.GeneratedTemplate
