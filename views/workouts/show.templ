package workouts

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/pkg/database"
	"github.com/jovandeginste/workout-tracker/views/helpers"
	"github.com/jovandeginste/workout-tracker/views/partials"
)

templ Show(w *database.Workout) {
	<!DOCTYPE html>
	<html>
		<head>
			<script src={ helpers.RouteFor(ctx, "assets") + "/dist/leaflet.js" }></script>
			<link href={ helpers.RouteFor(ctx, "assets") + "/dist/leaflet.css" } rel="stylesheet"/>
			<script src={ helpers.RouteFor(ctx, "assets") + "/dist/apexcharts.min.js" }></script>
			<link href={ helpers.RouteFor(ctx, "assets") + "/dist/apexcharts.css" } rel="stylesheet"/>
			<link
				href={ helpers.RouteFor(ctx, "assets") + "/dist/shareon.min.css" }
				rel="stylesheet"
			/>
			<script src={ helpers.RouteFor(ctx, "assets") + "/dist/shareon.iife.js" } defer init></script>
			@partials.Head()
		</head>
		<body>
			@partials.Header()
			{{ currentUser := helpers.CurrentUser(ctx) }}
			<div class="content">
				<div class="gap-4">
					if w.User.ID == currentUser.ID {
						<span class="float-right actions">
							if w.Dirty {
								<span class="dirty">
									@helpers.IconFor("refresh")
									{ i18n.T(ctx, "refresh in progress") }
								</span>
							}
							@Actions(w)
						</span>
					}
					<h2>
						@helpers.IconFor(w.Type.String())
						{ w.Name }
					</h2>
				</div>
				<div class="lg:flex lg:flex-wrap print:block">
					if w.HasTracks() {
						<div id="map-container" class="small-size pagebreak">
							<div class="inner-form">
								@Map(w)
							</div>
						</div>
					}
					<div class="basis-1/2 2xl:basis-1/3">
						<div class="inner-form">
							@FullWorkoutDetails(w)
						</div>
					</div>
					<div class="basis-1/2 2xl:basis-1/3">
						if w.Type.IsDistance() && w.Type.IsDuration() && w.Details() != nil {
							<div class="inner-form">
								<div class="print:w-full overflow-y-auto">
									if stats, err := w.StatisticsPer(1, currentUser.PreferredUnits().Distance()); err == nil {
										@Breakdown(stats)
									}
								</div>
							</div>
						}
					</div>
				</div>
				if len(w.RouteSegmentMatches) > 0 {
					<div class="pagebreak">
						<div class="basis-1/2 2xl:basis-1/3 inner-form">
							<h3>
								@helpers.IconFor("note")
								{ i18n.T(ctx, "Matching route segments") }
							</h3>
							<div class="print:w-full overflow-y-auto">
								@RouteSegments(w.RouteSegmentMatches)
							</div>
						</div>
					</div>
				}
				<div class="pagebreak">
					if len(w.Notes) > 0 {
						<div class="inner-form">
							<h3>
								@helpers.IconFor("note")
								{ i18n.T(ctx, "Notes") }
							</h3>
							<div>
								@templ.Raw(w.MarkdownNotes())
							</div>
						</div>
					}
				</div>
				if w.Details() != nil {
					<div class="inner-form h-[300px] md:h-[500px] print:hidden">
						<h3>
							<span>
								@helpers.IconFor("speed")
								{ i18n.T(ctx, "Average speed") }
							</span>
							/
							<span>
								@helpers.IconFor("elevation")
								{ i18n.T(ctx, "Elevation") }
							</span>
						</h3>
						if stats, err := w.StatisticsPer(1, "min"); err == nil {
							@ShowStats(stats)
						}
					</div>
				}
			</div>
			@partials.Footer()
		</body>
	</html>
}
