// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package workouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/jovandeginste/workout-tracker/pkg/database"
	"github.com/jovandeginste/workout-tracker/views/helpers"
)

func Map(w *database.Workout) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		pu := helpers.CurrentUser(ctx).PreferredUnits()
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"map\" class=\"border-2 border-black rounded-xl h-[300px] sm:h-[400px] md:h-[600px] print:w-full print:h-[600px]\"><script src=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(helpers.RouteFor(ctx, "assets") + "/map.js")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/workouts/map.templ`, Line: 14, Col: 59}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}

		mapConfig := struct {
			CenterLat     float64
			CenterLng     float64
			MinElevation  float64
			MaxElevation  float64
			MaxSpeed      float64
			SpeedName     string
			ElevationName string
			StreetsName   string
			AerialName    string
		}{
			CenterLat:     w.Center().Lat,
			CenterLng:     w.Center().Lng,
			MinElevation:  w.MinElevation(),
			MaxElevation:  w.MaxElevation(),
			MaxSpeed:      w.MaxSpeed(),
			SpeedName:     helpers.I18n(ctx, "Average speed"),
			ElevationName: helpers.I18n(ctx, "Elevation"),
			StreetsName:   helpers.I18n(ctx, "Streets"),
			AerialName:    helpers.I18n(ctx, "Aerial"),
		}
		templ_7745c5c3_Err = templ.JSONScript("map-config", mapConfig).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}

		type point struct {
			Lat       float64 `json:"lat"`
			Lng       float64 `json:"lng"`
			Speed     float64 `json:"speed"`
			Elevation float64 `json:"elevation"`
			Title     string  `json:"title"`
		}
		points := []point{}

		for _, p := range w.Details().Points {
			points = append(points, point{
				Lat:       p.Lat,
				Lng:       p.Lng,
				Speed:     p.AverageSpeed(),
				Elevation: p.ExtraMetrics.Get("elevation"),
				Title:     PointTitle(ctx, pu, &p),
			})
		}
		templ_7745c5c3_Err = templ.JSONScript("map-points", points).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n    mapConfig = JSON.parse(document.getElementById('map-config').textContent)\n    makeMap({\n      elementID: \"map\",\n      center: [mapConfig.CenterLat  ,   mapConfig.CenterLng  ],\n      minElevation: mapConfig.MinElevation ,\n      maxElevation:  mapConfig.MaxElevation ,\n      maxSpeed: mapConfig.MaxSpeed ,\n      speedName: mapConfig.SpeedName,\n      elevationName: mapConfig.ElevationName,\n      streetsName: mapConfig.StreetsName,\n      aerialName: mapConfig.AerialName,\n\n      points: JSON.parse(document.getElementById('map-points').textContent)\n    });\n  </script></div><div class=\"flex flex-wrap\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !helpers.AppConfig(ctx).SocialsDisabled && !helpers.CurrentUser(ctx).Profile.SocialsDisabled {
			templ_7745c5c3_Err = Social(w).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"grow flex flex-wrap flex-row-reverse\"><a href=\"#\" title=\"{{ i18n `Show map in full width` }}\" onclick=\"fullMap()\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = helpers.IconFor("expand").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</a></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
