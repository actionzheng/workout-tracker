package partials

import (
	"github.com/jovandeginste/workout-tracker/views/helpers"
	"time"
)

templ Head() {
	<title>Workout Tracker</title>
	<meta charset="UTF-8"/>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>
	<link rel="icon" type="image/png" href={ helpers.RouteFor(ctx, "assets") + "/dumbbell.png" }/>
	<link href={ helpers.RouteFor(ctx, "assets") + "/output.css" } rel="stylesheet"/>
	<script src={ helpers.RouteFor(ctx, "assets") + "/common.js" }></script>
	<script src={ helpers.RouteFor(ctx, "assets") + "/dist/htmx.min.js" }></script>
	@Theme()
}

templ Theme() {
	switch helpers.CurrentUser(ctx).Profile.Theme {
		case "light":
			<script>
        document.documentElement.classList.toggle("dark", false);
      </script>
		case "dark":
			<script>
        document.documentElement.classList.toggle("dark", true);
      </script>
		default:
			<script>
        var browserThemeDark = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
        document.documentElement.classList.toggle("dark", browserThemeDark);
      </script>
	}
}

templ SnippetDate(date *time.Time) {
	if helpers.CurrentUser(ctx).ShowFullDate() {
		<abbr title={ helpers.RelativeDate(ctx, date) }>{ helpers.LocalDate(ctx, date) }</abbr>
	} else {
		<abbr title={ helpers.LocalDate(ctx, date) }>{ helpers.RelativeDate(ctx, date) }</abbr>
	}
}

templ Alerts() {
	<div id="alerts" class="messages">
		{{ ns := helpers.Notices(ctx) }}
		if ns != nil {
			<div class="notice" role="alert">
				for _, n := range ns {
					<span class="block sm:inline">{ n } </span>
				}
			</div>
		}
		{{ es := helpers.Errors(ctx) }}
		if es != nil {
			<div class="alert" role="alert">
				for _, e := range es {
					<span class="block sm:inline">{ e } </span>
				}
			</div>
		}
	</div>
}

templ Footer() {
	{{ v := helpers.Version(ctx) }}
	<div class="footer">
		<div>
			Workout Tracker,
			<a
				target="_blank"
				title={ "Build time: " + v.BuildTime }
				href={ templ.SafeURL("https://github.com/jovandeginste/workout-tracker/tree/" + v.Sha) }
			>
				{ v.PrettyVersion() }
			</a>
		</div>
		<div>
			<a
				class="icon-brands icon-baseline icon-space-sm icon-outside icon-github"
				target="_blank"
				href="https://github.com/jovandeginste/workout-tracker"
			>GitHub</a>
		</div>
		<div>
			<a
				class="icon-solid icon-baseline icon-space-sm icon-outside icon-clipboard-check"
				target="_blank"
				href={ templ.SafeURL("https://github.com/jovandeginste/workout-tracker/tree/" + v.Sha + "/CHANGELOG.md") }
			>Changelog</a>
		</div>
	</div>
}

templ Version() {
	{{ v := helpers.Version(ctx) }}
	{{ currentUser := helpers.CurrentUser(ctx) }}
	if currentUser.IsActive() {
		if v.Sha != currentUser.LastVersion {
			<div id="version-notification" class="version-notice max-h-48" role="alert">
				<span class="block sm:inline">
					This application was updated to version: 
					<a
						target="_blank"
						title={ "Build time:" + v.BuildTime }
						href={ templ.SafeURL("https://github.com/jovandeginste/workout-tracker/tree/" + v.Sha) }
					>
						{ v.PrettyVersion() }
					</a>
					. You may find the changes in
					<a
						target="_blank"
						href={ templ.SafeURL("https://github.com/jovandeginste/workout-tracker/tree/" + v.Sha + "/CHANGELOG.md") }
					>the Changelog</a>. (
					<a
						href="#"
						hx-target="#version-notification"
						hx-swap="beforeend"
						hx-post={ helpers.RouteFor(ctx, "user-update-version") }
					>hide until next update</a>)
				</span>
			</div>
		}
	}
}

templ Language() {
	<select class="border-0" onchange="changeLanguage(this.value)">
		for _, sl := range helpers.SupportedLanguages(ctx) {
			{{ linf := helpers.ToLanguageInformation(sl.String()) }}
			<option value={ linf.Code } selected?={ linf.Code == helpers.Language(ctx) }>
				{ linf.Flag } { linf.LocalName }
				if linf.EnglishName != "" && linf.EnglishName != linf.LocalName {
					({ linf.EnglishName }) 
				}
			</option>
		}
	</select>
	<script>
    function changeLanguage(value) {
      location.assign("?lang=" + value);
    }
  </script>
}

templ Header() {
	{{ currentUser := helpers.CurrentUser(ctx) }}
	<div class="menu md:flex md:flex-wrap gap-4">
		<h1><a href={ templ.SafeURL(helpers.RouteFor(ctx, "dashboard")) }>Workout Tracker</a> </h1>
		if currentUser.IsActive() {
			<div class="grow flex flex-wrap">
				<div class="grow flex flex-wrap justify-start">
					<div>
						<a href={ templ.SafeURL(helpers.RouteFor(ctx, "dashboard")) }>
							@helpers.IconFor("dashboard")
							<span class="autohide">{ helpers.I18n(ctx, "Dashboard") }</span>
						</a>
					</div>
					<div>
						<a href={ templ.SafeURL(helpers.RouteFor(ctx, "statistics")) }>
							@helpers.IconFor("statistics")
							<span class="autohide">{ helpers.I18n(ctx, "Statistics") }</span>
						</a>
					</div>
					<div>
						<a href={ templ.SafeURL(helpers.RouteFor(ctx, "workouts")) }>
							@helpers.IconFor("workout")
							<span class="autohide">{ helpers.I18n(ctx, "Workouts") }</span>
						</a>
					</div>
					<div>
						<a href={ templ.SafeURL(helpers.RouteFor(ctx, "route-segments")) }>
							@helpers.IconFor("route-segment")
							<span class="autohide">{ helpers.I18n(ctx, "Route segments") }</span>
						</a>
					</div>
					<div>
						<a href={ templ.SafeURL(helpers.RouteFor(ctx, "equipment")) }>
							@helpers.IconFor("equipment")
							<span class="autohide">{ helpers.I18n(ctx, "Equipment") }</span>
						</a>
					</div>
					<div>
						<a href={ templ.SafeURL(helpers.RouteFor(ctx, "heatmap")) }>
							@helpers.IconFor("heatmap")
							<span class="autohide">{ helpers.I18n(ctx, "Heatmap") }</span>
						</a>
					</div>
				</div>
				<div class="flex flex-wrap md:min-w-[400px] justify-end">
					if currentUser.Admin {
						<div>
							<a href={ templ.SafeURL(helpers.RouteFor(ctx, "admin")) }>
								@helpers.IconFor("admin")
								<span class="autohide">{ helpers.I18n(ctx, "Manage") }</span>
							</a>
						</div>
					}
					<div>
						<a href={ templ.SafeURL(helpers.RouteFor(ctx, "user-profile")) }>
							@helpers.IconFor("user-profile")
							{ currentUser.Name }
						</a>
					</div>
					<div class="-mr-5">
						<a href={ templ.SafeURL(helpers.RouteFor(ctx, "user-signout")) }>
							@helpers.IconFor("user-signout")
							<span class="autohide">{ helpers.I18n(ctx, "Logout") }</span>
						</a>
					</div>
				</div>
			</div>
		} else {
			<div class="md:grow flex flex-wrap justify-end md:justify-start"></div>
		}
		if currentUser == nil || currentUser.Profile.Language == "" ||  currentUser.Profile.Language == "browser" {
			<div
				class="flex flex-wrap md:min-w-[400px] justify-end mt-3 md:mt-0 pt-3 md:pt-0 border-neutral-500 border-t-2 md:border-t-0"
			>
				@Language()
			</div>
		}
	</div>
	@Alerts()
	@Version()
}
